initSidebarItems({"fn":[["abs","Computes absolute value element-wise: abs(x)"],["acos","Computes acos of the input Tensor element-wise: acos(x)"],["acos_h","Computes the inverse hyperbolic cos of the input Tensor element-wise: acosh(x)"],["add","Adds two Tensors element-wise, A + B."],["add_n","Adds a list of Tensors element-wise, each with the same shape and dtype."],["all","Computes the logical and of elements across dimensions of a Tensor."],["any","Computes the logical or of elements across dimensions of a Tensor."],["arg_max","Returns the indices of the maximum values along an axis."],["arg_min","Returns the indices of the minimum values along an axis."],["asin","Computes asin of the input Tensor element-wise: asin(x)"],["asin_h","Computes inverse hyperbolic sin of the input Tensor element-wise: asinh(x)"],["atan","Computes atan of the input Tensor element-wise: atan(x)"],["atan2","Computes arctangent of Tensors a / b element-wise: atan2(a, b)."],["atan_h","Computes inverse hyperbolic tan of the input Tensor element-wise: atanh(x)"],["avg_pool","Computes the 2D average pooling of an image."],["batch_norm","Batch normalization."],["batch_to_space_nd","This operation reshapes the \"batch\" dimension 0 into M + 1 dimensions of shape blockShape + [batch], interleaves these blocks back into the grid defined by the spatial dimensions [1, ..., M], to obtain a result with the same rank as the input."],["binary_accuracy","Binary accuracy metric function."],["binary_crossentropy","Binary crossentropy metric function."],["buffer","Creates an empty TensorBuffer with the specified shape and dtype."],["cast","Casts a Tensor to a new dtype."],["categorical_accuracy","Categorical accuracy metric function."],["categorical_crossentropy","Categorical crossentropy between an output tensor and a target tensor."],["ceil","Computes ceiling of input Tensor element-wise: ceil(x)"],["clip_by_value","Clips values element-wise. max(min(x, clipValueMax), clipValueMin)"],["clone","Creates a new tensor with the same values and shape as the specified tensor."],["complex","Converts two real numbers to a complex number."],["concat","Concatenates a list of Tensors along a given axis."],["conv_1d","Computes a 1D convolution over the input x."],["conv_2d","Computes a 2D convolution over the input x."],["conv_2d_transpose","Computes the transposed 2D convolution of an image, also known as a deconvolution."],["conv_3d","Computes a 3D convolution over the input x."],["cos","Computes cos of the input Tensor element-wise: cos(x)"],["cos_h","Computes hyperbolic cos of the input Tensor element-wise: cosh(x)"],["cosine_proximity","Loss or metric function: Cosine proximity."],["cumsum","Computes the cumulative sum of a Tensor along axis."],["depth_to_space","Rearranges data from depth into blocks of spatial data."],["depthwise_conv_2d","Depthwise 2D convolution."],["deregister_op","Deregister the Op for graph model executor."],["dispose","Disposes any Tensors found within the provided object."],["div","Divides two Tensors element-wise, A / B."],["dot","Computes the dot product of two matrices and/or vectors, t1 and t2."],["early_stopping","Factory function for a Callback that stops training when a monitored quantity has stopped improving."],["elu","Computes exponential linear element-wise: x > 0 ? e ^ x - 1 : 0."],["equal","Returns the truth value of (a == b) element-wise."],["erf","Computes gause error function of the input Tensor element-wise: erf(x)"],["exp","Computes exponential of the input Tensor element-wise. e ^ x"],["exp_m1","Computes exponential of the input Tensor minus one element-wise. e ^ x - 1"],["expand_dims","Returns a Tensor that has expanded rank, by inserting a dimension into the tensor's shape."],["eye","Create an identity matrix."],["fill","Creates a Tensor filled with a scalar value."],["floor","Computes floor of input Tensor element-wise: floor(x)."],["floor_div","Divides two Tensors element-wise, A / B. Supports broadcasting."],["gather","Gather slices from tensor x's axis axis according to indices."],["get_registered_op","Retrieve the OpMapper object for the registered op."],["greater","Returns the truth value of (a > b) element-wise."],["greater_equal","Returns the truth value of (a >= b) element-wise."],["imag","Returns the imaginary part of a complex (or real) tensor."],["input","Used to instantiate an input to a model as a SymbolicTensor."],["is_finite","Returns which elements of x are finite."],["is_inf","Returns which elements of x are Infinity or -Infinity."],["is_nan","Returns which elements of x are NaN."],["keep","Keeps a Tensor generated inside a tidy() from being disposed automatically."],["leaky_relu","Computes leaky rectified linear element-wise."],["less","Returns the truth value of (a < b) element-wise."],["less_equal","Returns the truth value of (a <= b) element-wise."],["linspace","Return an evenly spaced sequence of numbers over the given interval."],["load_graph_model","Load a graph model given a URL to the model definition."],["load_layers_model","Load a model composed of Layer objects, including its topology and optionally weights. See the Tutorial named \"How to import a Keras Model\" for usage examples."],["local_response_normalization","Normalizes the activation of a local neighborhood across or within channels."],["log","Computes natural logarithm of the input Tensor element-wise: ln(x)"],["log_1p","Computes natural logarithm of the input Tensor plus one element-wise: ln(1 + x)"],["log_sigmoid","Computes log sigmoid of the input Tensor element-wise: logSigmoid(x). For numerical stability, we use -softplus(-x)."],["log_softmax","Computes the log softmax."],["log_sum_exp","Computes the log(sum(exp(elements across the reduction dimensions))."],["logical_and","Returns the truth value of a AND b element-wise."],["logical_or","Returns the truth value of a OR b element-wise."],["logical_xor","Returns the truth value of a XOR b element-wise."],["mat_mul","Computes the dot product of two matrices, A * B. These must be matrices."],["max","Computes the maximum of elements across dimensions of a Tensor."],["max_pool","Computes the 2D max pooling of an image."],["maximum","Returns the max of a and b (a > b ? a : b) element-wise."],["mean","Computes the mean of elements across dimensions of a Tensor."],["mean_absolute_error","Loss or metric function: Mean absolute error."],["mean_absolute_percentage_error","Loss or metric function: Mean absolute percentage error."],["mean_squared_error","Loss or metric function: Mean squared error."],["memory","Returns memory info at the current time in the program."],["min","Computes the minimum value from the input."],["minimum","Returns the min of a and b (a < b ? a : b) element-wise."],["model","A model is a data structure that consists of Layers and defines inputs and outputs."],["modulus","Returns the mod of a and b element-wise. floor(x / y) * y + mod(x, y) = x."],["moments","Calculates the mean and variance of x."],["moving_average","Compute the moving average of a variable."],["mul","Multiplies two Tensors element-wise, A * B."],["multinomial","Creates a Tensor with values drawn from a multinomial distribution."],["neg","Computes -1 * x element-wise."],["next_frame","Returns a promise that resolve when a requestAnimationFrame has completed."],["norm","Computes the norm of scalar, vectors, and matrices."],["not_equal","Returns the truth value of (a != b) element-wise."],["one_hot","Creates a one-hot Tensor."],["ones","Creates a Tensor with all elements set to 1."],["ones_like","Creates a Tensor with all elements set to 1 with the same shape as the given tensor."],["outer_product","Computes the outer product of two vectors, v1 and v2."],["pad","Pads a Tensor with a given value and paddings."],["pool","Performs an N-D pooling operation."],["pow","Computes the power of one Tensor to another."],["precision","Computes the precision of the predictions with respect to the labels."],["prelu","Computes leaky rectified linear element-wise with parametric alphas."],["print","Prints information about the Tensor including its data."],["prod","Computes the product of elements across dimensions of a Tensor."],["profile","Executes the provided function f() and returns a promise that resolves with information about the function's memory use."],["random_normal","Creates a Tensor with values sampled from a normal distribution."],["random_uniform","Creates a Tensor with values sampled from a uniform distribution."],["range","Creates a new Tensor1D filled with the numbers in the range provided."],["real","Returns the real part of a complex (or real) tensor."],["recall","Computes the recall of the predictions with respect to the labels."],["reciprocal","Computes reciprocal of x element-wise: 1 / x"],["register_class","Register a class with the serialization map of TensorFlow.js."],["registered_op","Register an Op for graph model executor. This allow you to register TensorFlow custom op or override existing op."],["relu","Computes rectified linear element-wise: max(x, 0)."],["reshape","Reshapes a Tensor to a given shape."],["reverse","Reverses a Tensor along a specified axis."],["round","Computes round of input Tensor element-wise: round(x)."],["rsqrt","Computes reciprocal of square root of the input Tensor element-wise: y = 1 / sqrt(x)"],["scalar","Creates rank-0 Tensor (scalar) with the provided value and dtype."],["selu","Computes scaled exponential linear element-wise."],["separable_conv_2d","2-D convolution with separable filters."],["sequential","Creates a Sequential model. A sequential model is any model where the outputs of one layer are the inputs to the next layer, i.e. the model topology is a simple 'stack' of layers, with no branching or skipping."],["set_diff_1d_async","Computes the difference between two lists of numbers."],["sigmoid","Computes sigmoid element-wise, 1 / (1 + exp(-x))"],["sign","Returns an element-wise indication of the sign of a number."],["sin","Computes sin of the input Tensor element-wise: sin(x)"],["sin_h","Computes hyperbolic sin of the input Tensor element-wise: sinh(x)"],["slice","Extracts a slice from a Tensor starting at coordinates begin and is of size size."],["soft_plus","Computes softplus of the input Tensor element-wise: log(exp(x) + 1)"],["softmax","Computes the softmax normalized vector given the logits."],["space_to_batch_nd","This operation divides \"spatial\" dimensions [1, ..., M] of the input into a grid of blocks of shape blockShape, and interleaves these blocks with the \"batch\" dimension (0) such that in the output, the spatial dimensions [1, ..., M] correspond to the position within the grid, and the batch dimension combines both the position within a spatial block and the original batch position. Prior to division into blocks, the spatial dimensions of the input are optionally zero padded according to paddings."],["sparse_categorical_accuracy","Sparse categorical accuracy metric function."],["sparse_to_dense","Converts a sparse representation into a dense tensor."],["split","Splits a Tensor into sub tensors."],["sqrt","Computes square root of the input Tensor element-wise: y = sqrt(x)"],["square","Computes square of x element-wise: x ^ 2"],["squared_difference","Returns (a - b) * (a - b) element-wise."],["squeeze","Removes dimensions of size 1 from the shape of a Tensor."],["stack","Stacks a list of rank-R Tensors into one rank-(R+1) Tensor."],["step","Computes step of the input Tensor element-wise: x > 0 ? 1 : alpha * x"],["sub","Subtracts two Tensors element-wise, A - B."],["sum","Computes the sum of elements across dimensions of a Tensor."],["tan","Computes tan of the input Tensor element-wise, tan(x)"],["tan_h","Computes hyperbolic tangent of the input Tensor element-wise: tanh(x)"],["tensor","Creates a Tensor with the provided values, shape and dtype."],["tensor1d","Creates rank-1 Tensor with the provided values, shape and dtype."],["tensor2d","Creates rank-2 Tensor with the provided values, shape and dtype."],["tensor3d","Creates rank-3 Tensor with the provided values, shape and dtype."],["tensor4d","Creates rank-4 Tensor with the provided values, shape and dtype."],["tensor5d","Creates rank-5 Tensor with the provided values, shape and dtype."],["tensor6d","Creates rank-6 Tensor with the provided values, shape and dtype."],["tidy","Executes the provided function fn and after it is executed, cleans up all intermediate tensors allocated by fn except those returned by fn. fn must not return a Promise (async functions not allowed). The returned result can be a complex object."],["tile","Construct a tensor by repeating it the number of times given by reps."],["time","Executes f() and returns a promise that resolves with timing information."],["transpose","Transposes the Tensor. Permutes the dimensions according to perm."],["truncated_normal","Creates a Tensor with values sampled from a truncated normal distribution."],["unsorted_segment_sum","Computes the sum along segments of a Tensor."],["unstack","Unstacks a Tensor of rank-R into a list of rank-(R-1) Tensors."],["variable","Creates a new variable with the provided initial value."],["where_","Returns the elements, either a or b depending on the condition."],["where_async","Returns the coordinates of true elements of condition."],["zeros","Creates a Tensor with all elements set to 0."],["zeros_like","Creates a Tensor with all elements set to 0 with the same shape as the given tensor."]],"mod":[["browser",""],["io",""],["losses",""],["train",""]],"static":[["callbacks",""],["metrics",""]],"struct":[["Activation",""],["Callbacks",""],["DatasetContainer",""],["DisposeResult",""],["EarlyStopping",""],["GraphModel","A GraphModel is a directed, acyclic graph of built from SavedModel GraphDef and allows inference exeuction."],["IOHandler",""],["Initializer",""],["Layer","A Layer is a grouping of operations and weights that can be composed to create a LayersModel."],["LayersModel","A LayersModel is a directed, acyclic graph of Layers plus methods for training, evaluation, prediction and saving."],["Metrics",""],["MomentsResult","MomentsResult is a dictionary returned from `Tensor.moments`."],["RNNCell","An RNNCell layer."],["Regularizer",""],["Sequential","A model with a stack of layers, feeding linearly from one to the next."],["Serializable","Serializable defines the serialization contract."],["SymbolicTensor","SymbolicTensor is a placeholder for a Tensor without any concrete value."],["Tensor","A Tensor object represents an immutable, multidimensional array of numbers that has a shape and a data type."],["TensorBuffer","A mutable object, similar to Tensor, that allows users to set values at locations before converting to an immutable Tensor."],["Variable","A mutable Tensor, useful for persisting state, e.g. for training."]],"type":[["DType",""],["OpMapper",""]]});
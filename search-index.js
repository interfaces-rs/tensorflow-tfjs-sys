var N=null,E="",T="t",U="u",searchIndex={};
var R=["object","jsvalue","option","promise","opmapper","sequential","tensor","function","usize","activation","float32array","jsstring","variable","metrics","htmlcanvaselement","tensorflow_tfjs_sys","initializer","regularizer","constraint","dispose","evaluate","Returns the loss value & metrics values for the model in…","evaluate_dataset","Evaluate model using a dataset object.","dataset","Trains the model for a fixed number of epochs (iterations…","fit_dataset","Trains the model using a dataset object.","predict","Generates output predictions for the input samples.","train_on_batch","Runs a single gradient update on a single batch of data.","Returns the tensor data as a nested array. The transfer of…","tensorbuffer","expand_dims","Returns a Tensor that has expanded rank, by inserting a…","Prints information about the Tensor including its data.","callbacks","get_config","try_from","try_into","borrow_mut","return_abi","result","type_id","borrow","typeid","tensorflow_tfjs_sys::train","as_ref","layersmodel","momentsresult","symbolictensor","disposeresult","earlystopping","serializable","rnncell","graphmodel","optimizer","datasetcontainer","iohandler","instanceof","unchecked_from_js","unchecked_from_js_ref","ref_from_abi","from_abi","into_abi","describe","is_none","GraphModel","LayersModel","Sequential","MomentsResult","TensorBuffer","Variable","DisposeResult","Serializable","SymbolicTensor","Activation","Callbacks","DatasetContainer","EarlyStopping","Initializer","IOHandler","Regularizer","Optimizer"];

searchIndex["tensorflow_tfjs_sys"]={"doc":E,"i":[[3,"Layer",R[15],"A Layer is a grouping of operations and weights that can…",N,N],[3,"RNNCell",E,"An RNNCell layer.",N,N],[3,R[68],E,"A GraphModel is a directed, acyclic graph of built from…",N,N],[3,R[69],E,"A LayersModel is a directed, acyclic graph of Layers plus…",N,N],[3,R[70],E,"A model with a stack of layers, feeding linearly from one…",N,N],[3,R[71],E,"MomentsResult is a dictionary returned from…",N,N],[3,R[76],E,"SymbolicTensor is a placeholder for a Tensor without any…",N,N],[3,"Tensor",E,"A Tensor object represents an immutable, multidimensional…",N,N],[3,R[72],E,"A mutable object, similar to Tensor, that allows users to…",N,N],[3,R[73],E,"A mutable Tensor, useful for persisting state, e.g. for…",N,N],[3,R[77],E,E,N,N],[3,R[78],E,E,N,N],[3,R[79],E,E,N,N],[3,R[74],E,E,N,N],[3,R[80],E,E,N,N],[3,R[81],E,E,N,N],[3,R[82],E,E,N,N],[3,"Metrics",E,E,N,N],[3,R[83],E,E,N,N],[3,R[75],E,"Serializable defines the serialization contract.",N,N],[5,"deregister_op",E,"Deregister the Op for graph model executor.",N,[[["str"]]]],[5,"get_registered_op",E,"Retrieve the OpMapper object for the registered op.",N,[[["str"]],[R[4]]]],[5,"input",E,"Used to instantiate an input to a model as a SymbolicTensor.",N,[[[R[0]]],[R[51]]]],[5,"load_graph_model",E,"Load a graph model given a URL to the model definition.",N,[[[R[1]],[R[0]],[R[2],[R[0]]]],[R[3]]]],[5,"load_layers_model",E,"Load a model composed of Layer objects, including its…",N,[[[R[1]],[R[0]],[R[2],[R[0]]]],[R[3]]]],[5,"model",E,"A model is a data structure that consists of Layers and…",N,[[[R[0]]],[R[49]]]],[5,"register_class",E,"Register a class with the serialization map of…",N,[[[R[1]]]]],[5,"registered_op",E,"Register an Op for graph model executor. This allow you to…",N,[[["str"],[R[0]]],[R[4]]]],[5,R[5],E,"Creates a Sequential model. A sequential model is any…",N,[[[R[0]],[R[2],[R[0]]]],[R[5]]]],[5,R[19],E,"Disposes any Tensors found within the provided object.",N,[[[R[1]]]]],[5,"keep",E,"Keeps a Tensor generated inside a tidy() from being…",N,[[[R[6]]],[R[6]]]],[5,"memory",E,"Returns memory info at the current time in the program.",N,[[],[R[0]]]],[5,"next_frame",E,"Returns a promise that resolve when a…",N,[[],[R[3]]]],[5,"profile",E,"Executes the provided function f() and returns a promise…",N,[[[R[7]]],[R[3]]]],[5,"tidy",E,"Executes the provided function fn and after it is…",N,[[[R[1]],[R[2],[R[7]]],[R[7]]],[R[1]]]],[5,"time",E,"Executes f() and returns a promise that resolves with…",N,[[[R[7]]],[R[3]]]],[5,"add",E,"Adds two Tensors element-wise, A + B.",N,[[[R[6]]],[R[6]]]],[5,"add_n",E,"Adds a list of Tensors element-wise, each with the same…",N,[[["array"]],[R[6]]]],[5,"div",E,"Divides two Tensors element-wise, A / B.",N,[[[R[6]]],[R[6]]]],[5,"floor_div",E,"Divides two Tensors element-wise, A / B. Supports…",N,[[[R[6]]],[R[6]]]],[5,"maximum",E,"Returns the max of a and b (a > b ? a : b) element-wise.",N,[[[R[6]]],[R[6]]]],[5,"minimum",E,"Returns the min of a and b (a < b ? a : b) element-wise.",N,[[[R[6]]],[R[6]]]],[5,"mul",E,"Multiplies two Tensors element-wise, A * B.",N,[[[R[6]]],[R[6]]]],[5,"pow",E,"Computes the power of one Tensor to another.",N,[[[R[6]]],[R[6]]]],[5,"modulus",E,"Returns the mod of a and b element-wise. floor(x / y) * y…",N,[[[R[6]]],[R[6]]]],[5,"squared_difference",E,"Returns (a - b) * (a - b) element-wise.",N,[[[R[6]]],[R[6]]]],[5,"sub",E,"Subtracts two Tensors element-wise, A - B.",N,[[[R[6]]],[R[6]]]],[5,"abs",E,"Computes absolute value element-wise: abs(x)",N,[[[R[6]]],[R[6]]]],[5,"acos",E,"Computes acos of the input Tensor element-wise: acos(x)",N,[[[R[6]]],[R[6]]]],[5,"acos_h",E,"Computes the inverse hyperbolic cos of the input Tensor…",N,[[[R[6]]],[R[6]]]],[5,"asin",E,"Computes asin of the input Tensor element-wise: asin(x)",N,[[[R[6]]],[R[6]]]],[5,"asin_h",E,"Computes inverse hyperbolic sin of the input Tensor…",N,[[[R[6]]],[R[6]]]],[5,"atan",E,"Computes atan of the input Tensor element-wise: atan(x)",N,[[[R[6]]],[R[6]]]],[5,"atan2",E,"Computes arctangent of Tensors a / b element-wise:…",N,[[[R[6]]],[R[6]]]],[5,"atan_h",E,"Computes inverse hyperbolic tan of the input Tensor…",N,[[[R[6]]],[R[6]]]],[5,"ceil",E,"Computes ceiling of input Tensor element-wise: ceil(x)",N,[[[R[6]]],[R[6]]]],[5,"clip_by_value",E,"Clips values element-wise. max(min(x, clipValueMax),…",N,[[["i32"],[R[6]]],[R[6]]]],[5,"cos",E,"Computes cos of the input Tensor element-wise: cos(x)",N,[[[R[6]]],[R[6]]]],[5,"cos_h",E,"Computes hyperbolic cos of the input Tensor element-wise:…",N,[[[R[6]]],[R[6]]]],[5,"elu",E,"Computes exponential linear element-wise: x > 0 ? e ^ x -…",N,[[[R[6]]],[R[6]]]],[5,"erf",E,"Computes gause error function of the input Tensor…",N,[[[R[6]]],[R[6]]]],[5,"exp",E,"Computes exponential of the input Tensor element-wise. e ^ x",N,[[[R[6]]],[R[6]]]],[5,"exp_m1",E,"Computes exponential of the input Tensor minus one…",N,[[[R[6]]],[R[6]]]],[5,"floor",E,"Computes floor of input Tensor element-wise: floor(x).",N,[[[R[6]]],[R[6]]]],[5,"is_finite",E,"Returns which elements of x are finite.",N,[[[R[6]]],[R[6]]]],[5,"is_inf",E,"Returns which elements of x are Infinity or -Infinity.",N,[[[R[6]]],[R[6]]]],[5,"is_nan",E,"Returns which elements of x are NaN.",N,[[[R[6]]],[R[6]]]],[5,"leaky_relu",E,"Computes leaky rectified linear element-wise.",N,[[["i32"],[R[6]]],[R[6]]]],[5,"log",E,"Computes natural logarithm of the input Tensor…",N,[[[R[6]]],[R[6]]]],[5,"log_1p",E,"Computes natural logarithm of the input Tensor plus one…",N,[[[R[6]]],[R[6]]]],[5,"log_sigmoid",E,"Computes log sigmoid of the input Tensor element-wise:…",N,[[[R[6]]],[R[6]]]],[5,"neg",E,"Computes -1 * x element-wise.",N,[[[R[6]]],[R[6]]]],[5,"prelu",E,"Computes leaky rectified linear element-wise with…",N,[[[R[6]]],[R[6]]]],[5,"reciprocal",E,"Computes reciprocal of x element-wise: 1 / x",N,[[[R[6]]],[R[6]]]],[5,"relu",E,"Computes rectified linear element-wise: max(x, 0).",N,[[[R[6]]],[R[6]]]],[5,"round",E,"Computes round of input Tensor element-wise: round(x).",N,[[[R[6]]],[R[6]]]],[5,"rsqrt",E,"Computes reciprocal of square root of the input Tensor…",N,[[[R[6]]],[R[6]]]],[5,"selu",E,"Computes scaled exponential linear element-wise.",N,[[[R[6]]],[R[6]]]],[5,"sigmoid",E,"Computes sigmoid element-wise, 1 / (1 + exp(-x))",N,[[[R[6]]],[R[6]]]],[5,"sign",E,"Returns an element-wise indication of the sign of a number.",N,[[[R[6]]],[R[6]]]],[5,"sin",E,"Computes sin of the input Tensor element-wise: sin(x)",N,[[[R[6]]],[R[6]]]],[5,"sin_h",E,"Computes hyperbolic sin of the input Tensor element-wise:…",N,[[[R[6]]],[R[6]]]],[5,"soft_plus",E,"Computes softplus of the input Tensor element-wise:…",N,[[[R[6]]],[R[6]]]],[5,"sqrt",E,"Computes square root of the input Tensor element-wise: y =…",N,[[[R[6]]],[R[6]]]],[5,"square",E,"Computes square of x element-wise: x ^ 2",N,[[[R[6]]],[R[6]]]],[5,"step",E,"Computes step of the input Tensor element-wise: x > 0 ? 1…",N,[[["i32"],[R[2],["i32"]],[R[6]]],[R[6]]]],[5,"tan",E,"Computes tan of the input Tensor element-wise, tan(x)",N,[[[R[6]]],[R[6]]]],[5,"tan_h",E,"Computes hyperbolic tangent of the input Tensor…",N,[[[R[6]]],[R[6]]]],[5,"dot",E,"Computes the dot product of two matrices and/or vectors,…",N,[[[R[6]]],[R[6]]]],[5,"mat_mul",E,"Computes the dot product of two matrices, A * B. These…",N,[[[R[6]],[R[2],["bool"]],[R[9]],["bool"]],[R[6]]]],[5,"norm",E,"Computes the norm of scalar, vectors, and matrices.",N,[[[R[2]],["bool"],[R[1]],[R[2],["bool"]],[R[6]]],[R[6]]]],[5,"outer_product",E,"Computes the outer product of two vectors, v1 and v2.",N,[[[R[6]]],[R[6]]]],[5,"transpose",E,"Transposes the Tensor. Permutes the dimensions according…",N,[[[R[2]],[R[6]]],[R[6]]]],[5,"avg_pool",E,"Computes the 2D average pooling of an image.",N,[[["str"],[R[1]],[R[6]]],[R[6]]]],[5,"conv_1d",E,"Computes a 1D convolution over the input x.",N,[[[R[2],["str"]],["str"],[R[8]],[R[2],[R[8]]],[R[1]],[R[6]]],[R[6]]]],[5,"conv_2d",E,"Computes a 2D convolution over the input x.",N,[[[R[2],["str"]],["str"],[R[8]],[R[2],[R[8]]],[R[1]],[R[6]]],[R[6]]]],[5,"conv_2d_transpose",E,"Computes the transposed 2D convolution of an image, also…",N,[[[R[2],["str"]],[R[2],[R[6]]],[R[9]],[R[6]],["str"],[R[2],[R[8]]],[R[8]],[R[1]]],[R[6]]]],[5,"conv_3d",E,"Computes a 3D convolution over the input x.",N,[[[R[2],["str"]],["str"],[R[8]],[R[2],[R[8]]],[R[1]],[R[6]]]]],[5,"depthwise_conv_2d",E,"Depthwise 2D convolution.",N,[[[R[2],["str"]],["str"],[R[8]],[R[2],[R[8]]],[R[1]],[R[6]]],[R[6]]]],[5,"max_pool",E,"Computes the 2D max pooling of an image.",N,[[["str"],[R[1]],[R[6]]],[R[6]]]],[5,"pool",E,"Performs an N-D pooling operation.",N,[[["str"],[R[2]],[R[1]],[R[6]]],[R[6]]]],[5,"separable_conv_2d",E,"2-D convolution with separable filters.",N,[[[R[2],["str"]],["str"],[R[2]],[R[1]],[R[6]]],[R[6]]]],[5,"all",E,"Computes the logical and of elements across dimensions of…",N,[[["bool"],[R[2]],[R[2],["bool"]],[R[6]]],[R[6]]]],[5,"any",E,"Computes the logical or of elements across dimensions of a…",N,[[["bool"],[R[2]],[R[2],["bool"]],[R[6]]],[R[6]]]],[5,"arg_max",E,"Returns the indices of the maximum values along an axis.",N,[[[R[2]],[R[6]]],[R[6]]]],[5,"arg_min",E,"Returns the indices of the minimum values along an axis.",N,[[[R[2]],[R[6]]],[R[6]]]],[5,"log_sum_exp",E,"Computes the log(sum(exp(elements across the reduction…",N,[[["bool"],[R[2]],[R[2],["bool"]],[R[6]]],[R[6]]]],[5,"max",E,"Computes the maximum of elements across dimensions of a…",N,[[["bool"],[R[2]],[R[2],["bool"]],[R[6]]],[R[6]]]],[5,"mean",E,"Computes the mean of elements across dimensions of a Tensor.",N,[[["bool"],[R[2]],[R[2],["bool"]],[R[6]]],[R[6]]]],[5,"min",E,"Computes the minimum value from the input.",N,[[["bool"],[R[2]],[R[2],["bool"]],[R[6]]],[R[6]]]],[5,"prod",E,"Computes the product of elements across dimensions of a…",N,[[["bool"],[R[2]],[R[2],["bool"]],[R[6]]],[R[6]]]],[5,"sum",E,"Computes the sum of elements across dimensions of a Tensor.",N,[[["bool"],[R[2]],[R[2],["bool"]],[R[6]]],[R[6]]]],[5,"batch_norm",E,"Batch normalization.",N,[[["f32"],[R[2],[R[6]]],[R[2],["f32"]],[R[6]]],[R[6]]]],[5,"local_response_normalization",E,"Normalizes the activation of a local neighborhood across…",N,[[[R[2],[R[8]]],[R[8]],["i32"],[R[2],["i32"]],[R[6]]],[R[6]]]],[5,"log_softmax",E,"Computes the log softmax.",N,[[["i32"],[R[2],["i32"]],[R[6]]],[R[6]]]],[5,"moments",E,"Calculates the mean and variance of x.",N,[[[R[6]],["bool"],[R[2],["bool"]],[R[2]]],[R[50]]]],[5,"softmax",E,"Computes the softmax normalized vector given the logits.",N,[[["i32"],[R[2],["i32"]],[R[6]]],[R[6]]]],[5,"sparse_to_dense",E,"Converts a sparse representation into a dense tensor.",N,[[[R[2],[R[6]]],[R[6]]],[R[6]]]],[5,"equal",E,"Returns the truth value of (a == b) element-wise.",N,[[[R[6]]],[R[6]]]],[5,"greater",E,"Returns the truth value of (a > b) element-wise.",N,[[[R[6]]],[R[6]]]],[5,"greater_equal",E,"Returns the truth value of (a >= b) element-wise.",N,[[[R[6]]],[R[6]]]],[5,"less",E,"Returns the truth value of (a < b) element-wise.",N,[[[R[6]]],[R[6]]]],[5,"less_equal",E,"Returns the truth value of (a <= b) element-wise.",N,[[[R[6]]],[R[6]]]],[5,"logical_and",E,"Returns the truth value of a AND b element-wise.",N,[[[R[6]]],[R[6]]]],[5,"logical_or",E,"Returns the truth value of a OR b element-wise.",N,[[[R[6]]],[R[6]]]],[5,"logical_xor",E,"Returns the truth value of a XOR b element-wise.",N,[[[R[6]]],[R[6]]]],[5,"not_equal",E,"Returns the truth value of (a != b) element-wise.",N,[[[R[6]]],[R[6]]]],[5,"where_",E,"Returns the elements, either a or b depending on the…",N,[[[R[6]]],[R[6]]]],[5,"where_async",E,"Returns the coordinates of true elements of condition.",N,[[[R[6]]],[R[3]]]],[5,"cumsum",E,"Computes the cumulative sum of a Tensor along axis.",N,[[["bool"],["i32"],[R[2],["bool"]],[R[2],["i32"]],[R[6]]],[R[6]]]],[5,"unsorted_segment_sum",E,"Computes the sum along segments of a Tensor.",N,[[[R[8]],[R[6]]],[R[6]]]],[5,"moving_average",E,"Compute the moving average of a variable.",N,[[["bool"],[R[2],[R[6]]],[R[2],["bool"]],[R[6]]],[R[6]]]],[5,"buffer",E,"Creates an empty TensorBuffer with the specified shape and…",N,[[[R[2],["dtype"]],[R[2],[R[10]]],["dtype"],[R[10]]],[R[33]]]],[5,"clone",E,"Creates a new tensor with the same values and shape as the…",N,[[[R[6]]],[R[6]]]],[5,"complex",E,"Converts two real numbers to a complex number.",N,[[["f32"]],[R[6]]]],[5,"eye",E,"Create an identity matrix.",N,[[[R[2],[R[8]]],[R[8]],[R[2]],["dtype"],[R[2],["dtype"]]],[R[6]]]],[5,"fill",E,"Creates a Tensor filled with a scalar value.",N,[[[R[2],["dtype"]],["i32"],["dtype"]],[R[6]]]],[5,"imag",E,"Returns the imaginary part of a complex (or real) tensor.",N,[[[R[6]]],[R[6]]]],[5,"linspace",E,"Return an evenly spaced sequence of numbers over the given…",N,[[[R[8]],["i32"]],[R[6]]]],[5,"one_hot",E,"Creates a one-hot Tensor.",N,[[[R[8]],["i32"],[R[6]]],[R[6]]]],[5,"ones",E,"Creates a Tensor with all elements set to 1.",N,[[["dtype"],[R[2],["dtype"]]],[R[6]]]],[5,"ones_like",E,"Creates a Tensor with all elements set to 1 with the same…",N,[[[R[6]]],[R[6]]]],[5,"print",E,R[36],N,[[[R[2],["bool"]],["bool"],[R[6]]]]],[5,"range",E,"Creates a new Tensor1D filled with the numbers in the…",N,[[[R[2],["dtype"]],["i32"],["dtype"],[R[2],["i32"]]],[R[6]]]],[5,"real",E,"Returns the real part of a complex (or real) tensor.",N,[[[R[6]]],[R[6]]]],[5,"scalar",E,"Creates rank-0 Tensor (scalar) with the provided value and…",N,[[["f32"],["dtype"],[R[2],["dtype"]]],[R[6]]]],[5,R[6],E,"Creates a Tensor with the provided values, shape and dtype.",N,[[["array"],[R[2],["dtype"]],["dtype"],[R[2]]],[R[6]]]],[5,"tensor1d",E,"Creates rank-1 Tensor with the provided values, shape and…",N,[[["dtype"],[R[2],["dtype"]],["array"]],[R[6]]]],[5,"tensor2d",E,"Creates rank-2 Tensor with the provided values, shape and…",N,[[["array"],[R[2],["dtype"]],["dtype"],[R[2]]],[R[6]]]],[5,"tensor3d",E,"Creates rank-3 Tensor with the provided values, shape and…",N,[[["array"],[R[2],["dtype"]],["dtype"],[R[2]]],[R[6]]]],[5,"tensor4d",E,"Creates rank-4 Tensor with the provided values, shape and…",N,[[["array"],[R[2],["dtype"]],["dtype"],[R[2]]],[R[6]]]],[5,"tensor5d",E,"Creates rank-5 Tensor with the provided values, shape and…",N,[[["array"],[R[2],["dtype"]],["dtype"],[R[2]]],[R[6]]]],[5,"tensor6d",E,"Creates rank-6 Tensor with the provided values, shape and…",N,[[["array"],[R[2],["dtype"]],["dtype"],[R[2]]],[R[6]]]],[5,"truncated_normal",E,"Creates a Tensor with values sampled from a truncated…",N,[[["f32"],[R[2],["dtype"]],["dtype"],[R[2],["f32"]]],[R[6]]]],[5,R[12],E,"Creates a new variable with the provided initial value.",N,[[[R[6]],[R[2],[R[11]]],[R[11]],[R[2],["dtype"]],[R[2],["bool"]],["dtype"],["bool"]],[R[12]]]],[5,"zeros",E,"Creates a Tensor with all elements set to 0.",N,[[["dtype"],[R[2],["dtype"]]],[R[6]]]],[5,"zeros_like",E,"Creates a Tensor with all elements set to 0 with the same…",N,[[[R[6]]],[R[6]]]],[5,"batch_to_space_nd",E,"This operation reshapes the \"batch\" dimension 0 into M + 1…",N,[[["array"],[R[6]]],[R[6]]]],[5,"cast",E,"Casts a Tensor to a new dtype.",N,[[["dtype"],[R[6]]],[R[6]]]],[5,"depth_to_space",E,"Rearranges data from depth into blocks of spatial data.",N,[[[R[2],["str"]],["str"],[R[8]],[R[6]]],[R[6]]]],[5,R[34],E,R[35],N,[[[R[2],[R[8]]],[R[8]],[R[6]]],[R[6]]]],[5,"pad",E,"Pads a Tensor with a given value and paddings.",N,[[["array"],["f32"],[R[6]]],[R[6]]]],[5,"reshape",E,"Reshapes a Tensor to a given shape.",N,[[[R[6]]],[R[6]]]],[5,"set_diff_1d_async",E,"Computes the difference between two lists of numbers.",N,[[[R[6]]],[R[3]]]],[5,"space_to_batch_nd",E,"This operation divides \"spatial\" dimensions [1, ..., M] of…",N,[[["array"],[R[6]]],[R[6]]]],[5,"squeeze",E,"Removes dimensions of size 1 from the shape of a Tensor.",N,[[[R[6]]],[R[6]]]],[5,"concat",E,"Concatenates a list of Tensors along a given axis.",N,[[[R[2],[R[8]]],[R[8]],["array"]],[R[6]]]],[5,"gather",E,"Gather slices from tensor x's axis axis according to…",N,[[[R[2],[R[8]]],[R[8]],[R[6]]],[R[6]]]],[5,"reverse",E,"Reverses a Tensor along a specified axis.",N,[[[R[2],[R[8]]],[R[8]],[R[6]]],[R[6]]]],[5,"slice",E,"Extracts a slice from a Tensor starting at coordinates…",N,[[[R[1]],[R[6]]],[R[6]]]],[5,"split",E,"Splits a Tensor into sub tensors.",N,[[[R[2],[R[8]]],[R[8]],[R[1]],[R[6]]],["array"]]],[5,"stack",E,"Stacks a list of rank-R Tensors into one rank-(R+1) Tensor.",N,[[[R[8]],["array"]],[R[6]]]],[5,"tile",E,"Construct a tensor by repeating it the number of times…",N,[[[R[6]]],[R[6]]]],[5,"unstack",E,"Unstacks a Tensor of rank-R into a list of rank-(R-1)…",N,[[[R[2],[R[8]]],[R[8]],[R[6]]],["array"]]],[5,"multinomial",E,"Creates a Tensor with values drawn from a multinomial…",N,[[[R[2],[R[8]]],["bool"],[R[8]],[R[2],["bool"]],[R[6]]],[R[6]]]],[5,"random_normal",E,"Creates a Tensor with values sampled from a normal…",N,[[[R[2],["number"]],[R[2],[R[8]]],[R[2],["dtype"]],[R[8]],["dtype"],["number"]],[R[6]]]],[5,"random_uniform",E,"Creates a Tensor with values sampled from a uniform…",N,[[[R[2],["number"]],[R[2],[R[8]]],[R[2],["dtype"]],[R[8]],["dtype"],["number"]],[R[6]]]],[5,"early_stopping",E,"Factory function for a Callback that stops training when a…",N,[[[R[37]],[R[0]],[R[2],[R[0]]]],[R[53]]]],[5,"binary_accuracy",E,"Binary accuracy metric function.",N,[[[R[13]],[R[6]]],[R[6]]]],[5,"binary_crossentropy",E,"Binary crossentropy metric function.",N,[[[R[13]],[R[6]]],[R[6]]]],[5,"categorical_accuracy",E,"Categorical accuracy metric function.",N,[[[R[13]],[R[6]]],[R[6]]]],[5,"categorical_crossentropy",E,"Categorical crossentropy between an output tensor and a…",N,[[[R[13]],[R[6]]],[R[6]]]],[5,"cosine_proximity",E,"Loss or metric function: Cosine proximity.",N,[[[R[13]],[R[6]]],[R[6]]]],[5,"mean_absolute_error",E,"Loss or metric function: Mean absolute error.",N,[[[R[13]],[R[6]]],[R[6]]]],[5,"mean_absolute_percentage_error",E,"Loss or metric function: Mean absolute percentage error.",N,[[[R[13]],[R[6]]],[R[6]]]],[5,"mean_squared_error",E,"Loss or metric function: Mean squared error.",N,[[[R[13]],[R[6]]],[R[6]]]],[5,"precision",E,"Computes the precision of the predictions with respect to…",N,[[[R[13]],[R[6]]],[R[6]]]],[5,"recall",E,"Computes the recall of the predictions with respect to the…",N,[[[R[13]],[R[6]]],[R[6]]]],[5,"sparse_categorical_accuracy",E,"Sparse categorical accuracy metric function.",N,[[[R[13]],[R[6]]],[R[6]]]],[0,"browser",E,E,N,N],[5,"from_pixels","tensorflow_tfjs_sys::browser","Creates a Tensor from an image.",N,[[[R[1]],[R[2],[R[8]]],[R[8]]],[R[6]]]],[5,"to_pixels",E,"Draws a Tensor of pixel values to a byte array or…",N,[[[R[14]],[R[2],[R[14]]],[R[6]]],[R[3]]]],[0,"io",R[15],E,N,N],[5,"copy_model","tensorflow_tfjs_sys::io","Copy a model from one URL to another.",N,[[["str"]],[R[3]]]],[5,"list_models",E,"List all models stored in registered storage mediums.",N,[[],[R[3]]]],[5,"move_model",E,"Move a model from one URL to another.",N,[[["str"]],[R[3]]]],[5,"remove_model",E,"Remove a model specified by URL from a reigstered storage…",N,[[["str"]],[R[3]]]],[11,"add_loss",R[15],"Add losses to the layer.",0,[[[R[1]],["self"]]]],[11,"add_weight",E,"Adds a weight variable to the layer.",0,[[[R[2],[R[17]]],[R[2],[R[18]]],["dtype"],[R[2],[R[16]]],[R[16]],[R[11]],["array"],[R[17]],[R[2],["dtype"]],[R[2],["bool"]],["bool"],[R[18]],["self"]]]],[11,"apply",E,"Builds or executes a `Layer's logic.",0,[[[R[0]],[R[1]],["self"],[R[2],[R[0]]]],[R[1]]]],[11,"build",E,"Creates the layer weights.",0,[[[R[1]],["self"]]]],[11,"compute_output_shape",E,"Computes the output shape of the layer.",0,[[[R[1]],["self"]],[R[1]]]],[11,"count_params",E,"Counts the total number of numbers (e.g., float32, int32)…",0,[[["self"]],[R[8]]]],[11,R[19],E,"Attempt to dispose layer's weights.",0,[[["self"]],[R[52]]]],[11,R[38],E,"Returns the config of the layer.",0,[[["self"]],[R[0]]]],[11,"get_weights",E,"Returns the current values of the weights of the layer.",0,[[[R[2],["bool"]],["self"],["bool"]],["box"]]],[11,"set_weights",E,"Sets the weights of the layer, from Tensors.",0,[[["box"],["self"]]]],[11,"execute",E,"Executes inference for the model for given input tensors.",1,[[[R[0]],[R[1]],["self"],[R[2],[R[0]]]],[R[1]]]],[11,"execute_async",E,"Executes inference for the model for given input tensors…",1,[[[R[0]],[R[1]],["self"],[R[2],[R[0]]]],[R[3]]]],[11,R[19],E,"Releases the memory used by the weight tensors.",1,[[["self"]]]],[11,R[28],E,"Execute the inference for the input tensors.",1,[[[R[0]],[R[1]],["self"],[R[2],[R[0]]]],[R[1]]]],[11,"compile",E,"Configures and prepares the model for training and…",2,[[[R[0]],["self"]]]],[11,R[20],E,R[21],2,[[[R[0]],[R[1]],["self"],[R[2],[R[0]]]],[R[1]]]],[11,R[22],E,R[23],2,[[[R[0]],[R[24]],["self"],[R[2],[R[0]]]],[R[3]]]],[11,"fit",E,R[25],2,[[[R[0]],[R[1]],["self"],[R[2],[R[0]]]],[R[3]]]],[11,R[26],E,R[27],2,[[[R[0]],[R[24]],["self"]],[R[3]]]],[11,"get_layer",E,"Retrieves a layer based on either its name (unique) or…",2,[[[R[2],[R[11]]],[R[2],[R[8]]],[R[8]],["self"],[R[11]]],["layer"]]],[11,R[28],E,R[29],2,[[[R[0]],[R[1]],["self"],[R[2],[R[0]]]],[R[1]]]],[11,"predict_on_batch",E,"Returns predictions for a single batch of samples.",2,[[[R[1]],["self"]],[R[1]]]],[11,"save",E,"Save the configuration and/or weights of the LayersModel.",2,[[[R[0]],[R[2],[R[0]]],["self"],[R[11]]],[R[3]]]],[11,"summary",E,"Print a text summary of the model's layers.",2,[[[R[7]],["u32"],[R[2]],[R[2],["u32"]],["self"]]]],[11,R[30],E,R[31],2,[[[R[1]],["self"]],[R[3]]]],[11,"add",E,"Adds a layer instance on top of the layer stack.",3,[[["layer"],["self"]]]],[11,R[20],E,R[21],3,[[[R[0]],[R[1]],["self"],[R[2],[R[0]]]],[R[1]]]],[11,R[22],E,R[23],3,[[[R[0]],[R[24]],["self"]],[R[3]]]],[11,"fit",E,R[25],3,[[[R[0]],[R[1]],["self"],[R[2],[R[0]]]],[R[3]]]],[11,R[26],E,R[27],3,[[[R[0]],[R[24]],["self"]],[R[3]]]],[11,R[28],E,R[29],3,[[[R[0]],[R[1]],["self"],[R[2],[R[0]]]],[R[1]]]],[11,"summary",E,"Print a text summary of the Sequential model's layers.",3,[[[R[7]],["u32"],[R[2],["u32"]],["self"]]]],[11,R[30],E,R[31],3,[[[R[1]],["self"]],[R[3]]]],[11,"mean",E,E,4,[[["self"]],[R[6]]]],[11,"variance",E,E,4,[[["self"]],[R[6]]]],[11,"abs",E,"Computes absolute value element-wise: abs(x).",5,[[["self"]],[R[6]]]],[11,"array",E,R[32],5,[[["self"]],[R[3]]]],[11,"array_sync",E,R[32],5,[[["self"]],["box"]]],[11,"as_1d",E,"Converts a Tensor to a Tensor1D.",5,[[["self"]],[R[6]]]],[11,"as_2d",E,"Converts a Tensor to a Tensor2D.",5,[[["self"],[R[8]]],[R[6]]]],[11,"as_3d",E,"Converts a Tensor to a Tensor3D.",5,[[["self"],[R[8]]],[R[6]]]],[11,"as_4d",E,"Converts a Tensor to a Tensor4D.",5,[[["self"],[R[8]]],[R[6]]]],[11,"as_5d",E,"Converts a Tensor to a Tensor5D.",5,[[["self"],[R[8]]],[R[6]]]],[11,"as_scalar",E,"Converts a size-1 Tensor to a Scalar.",5,[[["self"]],[R[6]]]],[11,"as_type",E,"Casts a Tensor to a specified dtype.",5,[[["dtype"],["self"]],[R[6]]]],[11,"buffer",E,"Returns a promise of TensorBuffer that holds the…",5,[[["self"]],[R[3]]]],[11,"buffer_sync",E,"Returns a TensorBuffer that holds the underlying data.",5,[[["self"]],[R[33]]]],[11,"clone",E,"Returns a copy of the tensor. See clone() for details.",5,[[["self"]],[R[6]]]],[11,"data",E,"Asynchronously downloads the values from the Tensor.…",5,[[["self"]],[R[3]]]],[11,"data_sync",E,"Synchronously downloads the values from the Tensor. This…",5,[[["self"]],[R[1]]]],[11,R[19],E,"Disposes Tensor from memory.",5,[[["self"]]]],[11,R[34],E,R[35],5,[[[R[2],[R[8]]],["self"],[R[8]]],[R[6]]]],[11,"cumsum",E,"Returns the cumulative sum of the Tensor along axis.",5,[[[R[2],[R[8]]],[R[8]],[R[2],["bool"]],["self"],["bool"]],[R[6]]]],[11,"flatten",E,"Flatten a Tensor to a 1D array.",5,[[["self"]],[R[6]]]],[11,"print",E,R[36],5,[[[R[2],["bool"]],["self"],["bool"]]]],[11,"reshape",E,"Reshapes the tensor into the provided shape. See reshape()…",5,[[["self"]],[R[6]]]],[11,"reshape_as",E,"Reshapes the tensor into the shape of the provided tensor.",5,[[["self"],[R[6]]],[R[6]]]],[11,"squeeze",E,"Returns a Tensor with dimensions of size 1 removed from…",5,[[["self"],[R[2]]],[R[6]]]],[11,"to_bool",E,"Casts the array to type bool",5,[[["self"]],[R[6]]]],[11,"to_float",E,"Casts the array to type float32",5,[[["self"]],[R[6]]]],[11,"to_int",E,"Casts the array to type int32",5,[[["self"]],[R[6]]]],[11,"to_string",E,"Returns a human-readable description of the tensor.",5,[[["self"]],[R[11]]]],[11,"get",E,"Returns the value in the buffer at the provided location.",6,[[["self"]],[R[1]]]],[11,"set",E,"Sets a value in the buffer at a given location.",6,[[[R[1]],["self"]]]],[11,"to_tensor",E,"Creates an immutable Tensor object from the buffer.",6,[[["self"]],[R[6]]]],[11,"new",E,E,7,[[[R[6]]],[R[12]]]],[11,"assign",E,"Assign a new Tensor to this variable. The new Tensor must…",7,[[["self"],[R[6]]]]],[0,"losses",E,E,N,N],[0,"train",E,E,N,N],[3,R[84],R[47],E,N,N],[5,"minimize",E,"Executes f() and minimizes the scalar output of f() by…",N,[[["box"],[R[7]],["bool"]],[[R[6]],[R[2],[R[6]]]]]],[6,"DType",R[15],E,N,N],[6,"OpMapper",E,E,N,N],[7,R[37],E,E,N,N],[7,R[13],E,E,N,N],[11,"num_disposed_variables",E,"Number of variables dispose in this dispose call.",8,[[["self"]],[R[8]]]],[11,"ref_count_after_dispose",E,"Reference count after the dispose call.",8,[[["self"]],[R[8]]]],[11,"get_class_name",E,"Return the class name for this class to use in…",9,[[["self"]],[R[11]]]],[11,R[38],E,"Return all the non-weight state needed to serialize this…",9,[[["self"]],[R[11]]]],[11,"into",E,E,0,[[],[U]]],[11,"from",E,E,0,[[[T]],[T]]],[11,R[39],E,E,0,[[[U]],[R[43]]]],[11,R[40],E,E,0,[[],[R[43]]]],[11,R[45],E,E,0,[[["self"]],[T]]],[11,R[41],E,E,0,[[["self"]],[T]]],[11,R[44],E,E,0,[[["self"]],[R[46]]]],[11,R[42],E,E,0,[[]]],[11,"into",E,E,10,[[],[U]]],[11,"from",E,E,10,[[[T]],[T]]],[11,R[39],E,E,10,[[[U]],[R[43]]]],[11,R[40],E,E,10,[[],[R[43]]]],[11,R[45],E,E,10,[[["self"]],[T]]],[11,R[41],E,E,10,[[["self"]],[T]]],[11,R[44],E,E,10,[[["self"]],[R[46]]]],[11,R[42],E,E,10,[[]]],[11,"into",E,E,1,[[],[U]]],[11,"from",E,E,1,[[[T]],[T]]],[11,R[39],E,E,1,[[[U]],[R[43]]]],[11,R[40],E,E,1,[[],[R[43]]]],[11,R[45],E,E,1,[[["self"]],[T]]],[11,R[41],E,E,1,[[["self"]],[T]]],[11,R[44],E,E,1,[[["self"]],[R[46]]]],[11,R[42],E,E,1,[[]]],[11,"into",E,E,2,[[],[U]]],[11,"from",E,E,2,[[[T]],[T]]],[11,R[39],E,E,2,[[[U]],[R[43]]]],[11,R[40],E,E,2,[[],[R[43]]]],[11,R[45],E,E,2,[[["self"]],[T]]],[11,R[41],E,E,2,[[["self"]],[T]]],[11,R[44],E,E,2,[[["self"]],[R[46]]]],[11,R[42],E,E,2,[[]]],[11,"into",E,E,3,[[],[U]]],[11,"from",E,E,3,[[[T]],[T]]],[11,R[39],E,E,3,[[[U]],[R[43]]]],[11,R[40],E,E,3,[[],[R[43]]]],[11,R[45],E,E,3,[[["self"]],[T]]],[11,R[41],E,E,3,[[["self"]],[T]]],[11,R[44],E,E,3,[[["self"]],[R[46]]]],[11,R[42],E,E,3,[[]]],[11,"into",E,E,4,[[],[U]]],[11,"from",E,E,4,[[[T]],[T]]],[11,R[39],E,E,4,[[[U]],[R[43]]]],[11,R[40],E,E,4,[[],[R[43]]]],[11,R[45],E,E,4,[[["self"]],[T]]],[11,R[41],E,E,4,[[["self"]],[T]]],[11,R[44],E,E,4,[[["self"]],[R[46]]]],[11,R[42],E,E,4,[[]]],[11,"into",E,E,11,[[],[U]]],[11,"from",E,E,11,[[[T]],[T]]],[11,R[39],E,E,11,[[[U]],[R[43]]]],[11,R[40],E,E,11,[[],[R[43]]]],[11,R[45],E,E,11,[[["self"]],[T]]],[11,R[41],E,E,11,[[["self"]],[T]]],[11,R[44],E,E,11,[[["self"]],[R[46]]]],[11,R[42],E,E,11,[[]]],[11,"into",E,E,5,[[],[U]]],[11,"from",E,E,5,[[[T]],[T]]],[11,R[39],E,E,5,[[[U]],[R[43]]]],[11,R[40],E,E,5,[[],[R[43]]]],[11,R[45],E,E,5,[[["self"]],[T]]],[11,R[41],E,E,5,[[["self"]],[T]]],[11,R[44],E,E,5,[[["self"]],[R[46]]]],[11,R[42],E,E,5,[[]]],[11,"into",E,E,6,[[],[U]]],[11,"from",E,E,6,[[[T]],[T]]],[11,R[39],E,E,6,[[[U]],[R[43]]]],[11,R[40],E,E,6,[[],[R[43]]]],[11,R[45],E,E,6,[[["self"]],[T]]],[11,R[41],E,E,6,[[["self"]],[T]]],[11,R[44],E,E,6,[[["self"]],[R[46]]]],[11,R[42],E,E,6,[[]]],[11,"into",E,E,7,[[],[U]]],[11,"from",E,E,7,[[[T]],[T]]],[11,R[39],E,E,7,[[[U]],[R[43]]]],[11,R[40],E,E,7,[[],[R[43]]]],[11,R[45],E,E,7,[[["self"]],[T]]],[11,R[41],E,E,7,[[["self"]],[T]]],[11,R[44],E,E,7,[[["self"]],[R[46]]]],[11,R[42],E,E,7,[[]]],[11,"into",E,E,12,[[],[U]]],[11,"from",E,E,12,[[[T]],[T]]],[11,R[39],E,E,12,[[[U]],[R[43]]]],[11,R[40],E,E,12,[[],[R[43]]]],[11,R[45],E,E,12,[[["self"]],[T]]],[11,R[41],E,E,12,[[["self"]],[T]]],[11,R[44],E,E,12,[[["self"]],[R[46]]]],[11,R[42],E,E,12,[[]]],[11,"into",E,E,13,[[],[U]]],[11,"from",E,E,13,[[[T]],[T]]],[11,R[39],E,E,13,[[[U]],[R[43]]]],[11,R[40],E,E,13,[[],[R[43]]]],[11,R[45],E,E,13,[[["self"]],[T]]],[11,R[41],E,E,13,[[["self"]],[T]]],[11,R[44],E,E,13,[[["self"]],[R[46]]]],[11,R[42],E,E,13,[[]]],[11,"into",E,E,14,[[],[U]]],[11,"from",E,E,14,[[[T]],[T]]],[11,R[39],E,E,14,[[[U]],[R[43]]]],[11,R[40],E,E,14,[[],[R[43]]]],[11,R[45],E,E,14,[[["self"]],[T]]],[11,R[41],E,E,14,[[["self"]],[T]]],[11,R[44],E,E,14,[[["self"]],[R[46]]]],[11,R[42],E,E,14,[[]]],[11,"into",E,E,8,[[],[U]]],[11,"from",E,E,8,[[[T]],[T]]],[11,R[39],E,E,8,[[[U]],[R[43]]]],[11,R[40],E,E,8,[[],[R[43]]]],[11,R[45],E,E,8,[[["self"]],[T]]],[11,R[41],E,E,8,[[["self"]],[T]]],[11,R[44],E,E,8,[[["self"]],[R[46]]]],[11,R[42],E,E,8,[[]]],[11,"into",E,E,15,[[],[U]]],[11,"from",E,E,15,[[[T]],[T]]],[11,R[39],E,E,15,[[[U]],[R[43]]]],[11,R[40],E,E,15,[[],[R[43]]]],[11,R[45],E,E,15,[[["self"]],[T]]],[11,R[41],E,E,15,[[["self"]],[T]]],[11,R[44],E,E,15,[[["self"]],[R[46]]]],[11,R[42],E,E,15,[[]]],[11,"into",E,E,16,[[],[U]]],[11,"from",E,E,16,[[[T]],[T]]],[11,R[39],E,E,16,[[[U]],[R[43]]]],[11,R[40],E,E,16,[[],[R[43]]]],[11,R[45],E,E,16,[[["self"]],[T]]],[11,R[41],E,E,16,[[["self"]],[T]]],[11,R[44],E,E,16,[[["self"]],[R[46]]]],[11,R[42],E,E,16,[[]]],[11,"into",E,E,17,[[],[U]]],[11,"from",E,E,17,[[[T]],[T]]],[11,R[39],E,E,17,[[[U]],[R[43]]]],[11,R[40],E,E,17,[[],[R[43]]]],[11,R[45],E,E,17,[[["self"]],[T]]],[11,R[41],E,E,17,[[["self"]],[T]]],[11,R[44],E,E,17,[[["self"]],[R[46]]]],[11,R[42],E,E,17,[[]]],[11,"into",E,E,18,[[],[U]]],[11,"from",E,E,18,[[[T]],[T]]],[11,R[39],E,E,18,[[[U]],[R[43]]]],[11,R[40],E,E,18,[[],[R[43]]]],[11,R[45],E,E,18,[[["self"]],[T]]],[11,R[41],E,E,18,[[["self"]],[T]]],[11,R[44],E,E,18,[[["self"]],[R[46]]]],[11,R[42],E,E,18,[[]]],[11,"into",E,E,19,[[],[U]]],[11,"from",E,E,19,[[[T]],[T]]],[11,R[39],E,E,19,[[[U]],[R[43]]]],[11,R[40],E,E,19,[[],[R[43]]]],[11,R[45],E,E,19,[[["self"]],[T]]],[11,R[41],E,E,19,[[["self"]],[T]]],[11,R[44],E,E,19,[[["self"]],[R[46]]]],[11,R[42],E,E,19,[[]]],[11,"into",E,E,9,[[],[U]]],[11,"from",E,E,9,[[[T]],[T]]],[11,R[39],E,E,9,[[[U]],[R[43]]]],[11,R[40],E,E,9,[[],[R[43]]]],[11,R[45],E,E,9,[[["self"]],[T]]],[11,R[41],E,E,9,[[["self"]],[T]]],[11,R[44],E,E,9,[[["self"]],[R[46]]]],[11,R[42],E,E,9,[[]]],[11,"into",R[47],E,20,[[],[U]]],[11,"from",E,E,20,[[[T]],[T]]],[11,R[39],E,E,20,[[[U]],[R[43]]]],[11,R[40],E,E,20,[[],[R[43]]]],[11,R[45],E,E,20,[[["self"]],[T]]],[11,R[41],E,E,20,[[["self"]],[T]]],[11,R[44],E,E,20,[[["self"]],[R[46]]]],[11,R[42],E,E,20,[[]]],[11,R[48],R[15],E,0,[[["self"]],[R[1]]]],[11,R[48],E,E,0,[[["self"]],["layer"]]],[11,R[48],E,E,10,[[["self"]],[R[1]]]],[11,R[48],E,E,10,[[["self"]],[R[55]]]],[11,R[48],E,E,10,[[["self"]],["layer"]]],[11,R[48],E,E,1,[[["self"]],[R[1]]]],[11,R[48],E,E,1,[[["self"]],[R[56]]]],[11,R[48],E,E,2,[[["self"]],[R[1]]]],[11,R[48],E,E,2,[[["self"]],[R[49]]]],[11,R[48],E,E,3,[[["self"]],[R[1]]]],[11,R[48],E,E,3,[[["self"]],[R[5]]]],[11,R[48],E,E,3,[[["self"]],[R[49]]]],[11,R[48],E,E,4,[[["self"]],[R[1]]]],[11,R[48],E,E,4,[[["self"]],[R[50]]]],[11,R[48],E,E,11,[[["self"]],[R[1]]]],[11,R[48],E,E,11,[[["self"]],[R[51]]]],[11,R[48],E,E,5,[[["self"]],[R[1]]]],[11,R[48],E,E,5,[[["self"]],[R[6]]]],[11,R[48],E,E,6,[[["self"]],[R[1]]]],[11,R[48],E,E,6,[[["self"]],[R[33]]]],[11,R[48],E,E,7,[[["self"]],[R[1]]]],[11,R[48],E,E,7,[[["self"]],[R[12]]]],[11,R[48],E,E,7,[[["self"]],[R[6]]]],[11,R[48],R[47],E,20,[[["self"]],[R[1]]]],[11,R[48],E,E,20,[[["self"]],[R[57]]]],[11,R[48],E,E,20,[[["self"]],[R[54]]]],[11,R[48],R[15],E,12,[[["self"]],[R[1]]]],[11,R[48],E,E,12,[[["self"]],[R[9]]]],[11,R[48],E,E,13,[[["self"]],[R[1]]]],[11,R[48],E,E,13,[[["self"]],[R[37]]]],[11,R[48],E,E,14,[[["self"]],[R[1]]]],[11,R[48],E,E,14,[[["self"]],[R[58]]]],[11,R[48],E,E,8,[[["self"]],[R[1]]]],[11,R[48],E,E,8,[[["self"]],[R[52]]]],[11,R[48],E,E,15,[[["self"]],[R[1]]]],[11,R[48],E,E,15,[[["self"]],[R[53]]]],[11,R[48],E,E,16,[[["self"]],[R[1]]]],[11,R[48],E,E,16,[[["self"]],[R[16]]]],[11,R[48],E,E,17,[[["self"]],[R[1]]]],[11,R[48],E,E,17,[[["self"]],[R[59]]]],[11,R[48],E,E,18,[[["self"]],[R[1]]]],[11,R[48],E,E,18,[[["self"]],[R[13]]]],[11,R[48],E,E,19,[[["self"]],[R[1]]]],[11,R[48],E,E,19,[[["self"]],[R[17]]]],[11,R[48],E,E,9,[[["self"]],[R[1]]]],[11,R[48],E,E,9,[[["self"]],[R[54]]]],[11,"from",E,E,0,[[[R[1]]],["layer"]]],[11,"from",E,E,10,[[[R[1]]],[R[55]]]],[11,"from",E,E,0,[[[R[55]]],["layer"]]],[11,"from",E,E,1,[[[R[1]]],[R[56]]]],[11,"from",E,E,2,[[[R[1]]],[R[49]]]],[11,"from",E,E,3,[[[R[1]]],[R[5]]]],[11,"from",E,E,2,[[[R[5]]],[R[49]]]],[11,"from",E,E,4,[[[R[1]]],[R[50]]]],[11,"from",E,E,11,[[[R[1]]],[R[51]]]],[11,"from",E,E,5,[[[R[1]]],[R[6]]]],[11,"from",E,E,6,[[[R[1]]],[R[33]]]],[11,"from",E,E,7,[[[R[1]]],[R[12]]]],[11,"from",E,E,5,[[[R[12]]],[R[6]]]],[11,"from",R[47],E,20,[[[R[1]]],[R[57]]]],[11,"from",R[15],E,9,[[[R[57]]],[R[54]]]],[11,"from",E,E,12,[[[R[1]]],[R[9]]]],[11,"from",E,E,13,[[[R[1]]],[R[37]]]],[11,"from",E,E,14,[[[R[1]]],[R[58]]]],[11,"from",E,E,8,[[[R[1]]],[R[52]]]],[11,"from",E,E,15,[[[R[1]]],[R[53]]]],[11,"from",E,E,16,[[[R[1]]],[R[16]]]],[11,"from",E,E,17,[[[R[1]]],[R[59]]]],[11,"from",E,E,18,[[[R[1]]],[R[13]]]],[11,"from",E,E,19,[[[R[1]]],[R[17]]]],[11,"from",E,E,9,[[[R[1]]],[R[54]]]],[11,"deref",E,E,0,[[["self"]],[R[1]]]],[11,"deref",E,E,10,[[["self"]],["layer"]]],[11,"deref",E,E,1,[[["self"]],[R[1]]]],[11,"deref",E,E,2,[[["self"]],[R[1]]]],[11,"deref",E,E,3,[[["self"]],[R[49]]]],[11,"deref",E,E,4,[[["self"]],[R[1]]]],[11,"deref",E,E,11,[[["self"]],[R[1]]]],[11,"deref",E,E,5,[[["self"]],[R[1]]]],[11,"deref",E,E,6,[[["self"]],[R[1]]]],[11,"deref",E,E,7,[[["self"]],[R[6]]]],[11,"deref",R[47],E,20,[[["self"]],[R[54]]]],[11,"deref",R[15],E,12,[[["self"]],[R[1]]]],[11,"deref",E,E,13,[[["self"]],[R[1]]]],[11,"deref",E,E,14,[[["self"]],[R[1]]]],[11,"deref",E,E,8,[[["self"]],[R[1]]]],[11,"deref",E,E,15,[[["self"]],[R[1]]]],[11,"deref",E,E,16,[[["self"]],[R[1]]]],[11,"deref",E,E,17,[[["self"]],[R[1]]]],[11,"deref",E,E,18,[[["self"]],[R[1]]]],[11,"deref",E,E,19,[[["self"]],[R[1]]]],[11,"deref",E,E,9,[[["self"]],[R[1]]]],[11,R[60],E,E,0,[[[R[1]]],["bool"]]],[11,R[61],E,E,0,[[[R[1]]],["self"]]],[11,R[62],E,E,0,[[[R[1]]],["self"]]],[11,R[60],E,E,10,[[[R[1]]],["bool"]]],[11,R[61],E,E,10,[[[R[1]]],["self"]]],[11,R[62],E,E,10,[[[R[1]]],["self"]]],[11,R[60],E,E,1,[[[R[1]]],["bool"]]],[11,R[61],E,E,1,[[[R[1]]],["self"]]],[11,R[62],E,E,1,[[[R[1]]],["self"]]],[11,R[60],E,E,2,[[[R[1]]],["bool"]]],[11,R[61],E,E,2,[[[R[1]]],["self"]]],[11,R[62],E,E,2,[[[R[1]]],["self"]]],[11,R[60],E,E,3,[[[R[1]]],["bool"]]],[11,R[61],E,E,3,[[[R[1]]],["self"]]],[11,R[62],E,E,3,[[[R[1]]],["self"]]],[11,R[60],E,E,4,[[[R[1]]],["bool"]]],[11,R[61],E,E,4,[[[R[1]]],["self"]]],[11,R[62],E,E,4,[[[R[1]]],["self"]]],[11,R[60],E,E,11,[[[R[1]]],["bool"]]],[11,R[61],E,E,11,[[[R[1]]],["self"]]],[11,R[62],E,E,11,[[[R[1]]],["self"]]],[11,R[60],E,E,5,[[[R[1]]],["bool"]]],[11,R[61],E,E,5,[[[R[1]]],["self"]]],[11,R[62],E,E,5,[[[R[1]]],["self"]]],[11,R[60],E,E,6,[[[R[1]]],["bool"]]],[11,R[61],E,E,6,[[[R[1]]],["self"]]],[11,R[62],E,E,6,[[[R[1]]],["self"]]],[11,R[60],E,E,7,[[[R[1]]],["bool"]]],[11,R[61],E,E,7,[[[R[1]]],["self"]]],[11,R[62],E,E,7,[[[R[1]]],["self"]]],[11,R[60],R[47],E,20,[[[R[1]]],["bool"]]],[11,R[61],E,E,20,[[[R[1]]],["self"]]],[11,R[62],E,E,20,[[[R[1]]],["self"]]],[11,R[60],R[15],E,12,[[[R[1]]],["bool"]]],[11,R[61],E,E,12,[[[R[1]]],["self"]]],[11,R[62],E,E,12,[[[R[1]]],["self"]]],[11,R[60],E,E,13,[[[R[1]]],["bool"]]],[11,R[61],E,E,13,[[[R[1]]],["self"]]],[11,R[62],E,E,13,[[[R[1]]],["self"]]],[11,R[60],E,E,14,[[[R[1]]],["bool"]]],[11,R[61],E,E,14,[[[R[1]]],["self"]]],[11,R[62],E,E,14,[[[R[1]]],["self"]]],[11,R[60],E,E,8,[[[R[1]]],["bool"]]],[11,R[61],E,E,8,[[[R[1]]],["self"]]],[11,R[62],E,E,8,[[[R[1]]],["self"]]],[11,R[60],E,E,15,[[[R[1]]],["bool"]]],[11,R[61],E,E,15,[[[R[1]]],["self"]]],[11,R[62],E,E,15,[[[R[1]]],["self"]]],[11,R[60],E,E,16,[[[R[1]]],["bool"]]],[11,R[61],E,E,16,[[[R[1]]],["self"]]],[11,R[62],E,E,16,[[[R[1]]],["self"]]],[11,R[60],E,E,17,[[[R[1]]],["bool"]]],[11,R[61],E,E,17,[[[R[1]]],["self"]]],[11,R[62],E,E,17,[[[R[1]]],["self"]]],[11,R[60],E,E,18,[[[R[1]]],["bool"]]],[11,R[61],E,E,18,[[[R[1]]],["self"]]],[11,R[62],E,E,18,[[[R[1]]],["self"]]],[11,R[60],E,E,19,[[[R[1]]],["bool"]]],[11,R[61],E,E,19,[[[R[1]]],["self"]]],[11,R[62],E,E,19,[[[R[1]]],["self"]]],[11,R[60],E,E,9,[[[R[1]]],["bool"]]],[11,R[61],E,E,9,[[[R[1]]],["self"]]],[11,R[62],E,E,9,[[[R[1]]],["self"]]],[11,R[63],E,E,0,[[]]],[11,R[63],E,E,10,[[]]],[11,R[63],E,E,1,[[]]],[11,R[63],E,E,2,[[]]],[11,R[63],E,E,3,[[]]],[11,R[63],E,E,4,[[]]],[11,R[63],E,E,11,[[]]],[11,R[63],E,E,5,[[]]],[11,R[63],E,E,6,[[]]],[11,R[63],E,E,7,[[]]],[11,R[63],R[47],E,20,[[]]],[11,R[63],R[15],E,12,[[]]],[11,R[63],E,E,13,[[]]],[11,R[63],E,E,14,[[]]],[11,R[63],E,E,8,[[]]],[11,R[63],E,E,15,[[]]],[11,R[63],E,E,16,[[]]],[11,R[63],E,E,17,[[]]],[11,R[63],E,E,18,[[]]],[11,R[63],E,E,19,[[]]],[11,R[63],E,E,9,[[]]],[11,R[64],E,E,0,[[],["self"]]],[11,R[64],E,E,10,[[],["self"]]],[11,R[64],E,E,1,[[],["self"]]],[11,R[64],E,E,2,[[],["self"]]],[11,R[64],E,E,3,[[],["self"]]],[11,R[64],E,E,4,[[],["self"]]],[11,R[64],E,E,11,[[],["self"]]],[11,R[64],E,E,5,[[],["self"]]],[11,R[64],E,E,6,[[],["self"]]],[11,R[64],E,E,7,[[],["self"]]],[11,R[64],R[47],E,20,[[],["self"]]],[11,R[64],R[15],E,12,[[],["self"]]],[11,R[64],E,E,13,[[],["self"]]],[11,R[64],E,E,14,[[],["self"]]],[11,R[64],E,E,8,[[],["self"]]],[11,R[64],E,E,15,[[],["self"]]],[11,R[64],E,E,16,[[],["self"]]],[11,R[64],E,E,17,[[],["self"]]],[11,R[64],E,E,18,[[],["self"]]],[11,R[64],E,E,19,[[],["self"]]],[11,R[64],E,E,9,[[],["self"]]],[11,R[65],E,E,0,[[]]],[11,R[65],E,E,10,[[]]],[11,R[65],E,E,1,[[]]],[11,R[65],E,E,2,[[]]],[11,R[65],E,E,3,[[]]],[11,R[65],E,E,4,[[]]],[11,R[65],E,E,11,[[]]],[11,R[65],E,E,5,[[]]],[11,R[65],E,E,6,[[]]],[11,R[65],E,E,7,[[]]],[11,R[65],R[47],E,20,[[]]],[11,R[65],R[15],E,12,[[]]],[11,R[65],E,E,13,[[]]],[11,R[65],E,E,14,[[]]],[11,R[65],E,E,8,[[]]],[11,R[65],E,E,15,[[]]],[11,R[65],E,E,16,[[]]],[11,R[65],E,E,17,[[]]],[11,R[65],E,E,18,[[]]],[11,R[65],E,E,19,[[]]],[11,R[65],E,E,9,[[]]],[11,R[66],E,E,0,[[]]],[11,R[66],E,E,10,[[]]],[11,R[66],E,E,1,[[]]],[11,R[66],E,E,2,[[]]],[11,R[66],E,E,3,[[]]],[11,R[66],E,E,4,[[]]],[11,R[66],E,E,11,[[]]],[11,R[66],E,E,5,[[]]],[11,R[66],E,E,6,[[]]],[11,R[66],E,E,7,[[]]],[11,R[66],R[47],E,20,[[]]],[11,R[66],R[15],E,12,[[]]],[11,R[66],E,E,13,[[]]],[11,R[66],E,E,14,[[]]],[11,R[66],E,E,8,[[]]],[11,R[66],E,E,15,[[]]],[11,R[66],E,E,16,[[]]],[11,R[66],E,E,17,[[]]],[11,R[66],E,E,18,[[]]],[11,R[66],E,E,19,[[]]],[11,R[66],E,E,9,[[]]],[11,R[67],E,E,0,[[],["bool"]]],[11,R[67],E,E,10,[[],["bool"]]],[11,R[67],E,E,1,[[],["bool"]]],[11,R[67],E,E,2,[[],["bool"]]],[11,R[67],E,E,3,[[],["bool"]]],[11,R[67],E,E,4,[[],["bool"]]],[11,R[67],E,E,11,[[],["bool"]]],[11,R[67],E,E,5,[[],["bool"]]],[11,R[67],E,E,6,[[],["bool"]]],[11,R[67],E,E,7,[[],["bool"]]],[11,R[67],R[47],E,20,[[],["bool"]]],[11,R[67],R[15],E,12,[[],["bool"]]],[11,R[67],E,E,13,[[],["bool"]]],[11,R[67],E,E,14,[[],["bool"]]],[11,R[67],E,E,8,[[],["bool"]]],[11,R[67],E,E,15,[[],["bool"]]],[11,R[67],E,E,16,[[],["bool"]]],[11,R[67],E,E,17,[[],["bool"]]],[11,R[67],E,E,18,[[],["bool"]]],[11,R[67],E,E,19,[[],["bool"]]],[11,R[67],E,E,9,[[],["bool"]]],[11,"none",E,E,0,[[]]],[11,"none",E,E,10,[[]]],[11,"none",E,E,1,[[]]],[11,"none",E,E,2,[[]]],[11,"none",E,E,3,[[]]],[11,"none",E,E,4,[[]]],[11,"none",E,E,11,[[]]],[11,"none",E,E,5,[[]]],[11,"none",E,E,6,[[]]],[11,"none",E,E,7,[[]]],[11,"none",R[47],E,20,[[]]],[11,"none",R[15],E,12,[[]]],[11,"none",E,E,13,[[]]],[11,"none",E,E,14,[[]]],[11,"none",E,E,8,[[]]],[11,"none",E,E,15,[[]]],[11,"none",E,E,16,[[]]],[11,"none",E,E,17,[[]]],[11,"none",E,E,18,[[]]],[11,"none",E,E,19,[[]]],[11,"none",E,E,9,[[]]]],"p":[[3,"Layer"],[3,R[68]],[3,R[69]],[3,R[70]],[3,R[71]],[3,"Tensor"],[3,R[72]],[3,R[73]],[3,R[74]],[3,R[75]],[3,"RNNCell"],[3,R[76]],[3,R[77]],[3,R[78]],[3,R[79]],[3,R[80]],[3,R[81]],[3,R[82]],[3,"Metrics"],[3,R[83]],[3,R[84]]]};
initSearch(searchIndex);addSearchOptions(searchIndex);